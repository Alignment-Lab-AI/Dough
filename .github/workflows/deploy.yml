name: Deploy to ECR

on:
 
  push:
    branches: [ main, piyush-dev ]

jobs:
  
  # build:
  #   name: Build Image
  #   runs-on: ubuntu-latest

  #   steps:

  #   - name: Check out code
  #     uses: actions/checkout@v2
    
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY }}
  #       aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_KEY }}
  #       aws-region: ap-south-1

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1

  #   - name: Build, tag, and push image to Amazon ECR
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       ECR_REPOSITORY: banodoco-frontend
  #       IMAGE_TAG: latest
  #     id: build-image
  #     run: |
  #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #       echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #   - name: Fill in the new image ID in the Amazon ECS task definition
  #     env:
  #       ECS_TASK_DEFINITION: .aws/task-definition.json
  #       CONTAINER_NAME: backend-banodoco-frontend
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
  #     with:
  #       task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #       container-name: ${{ env.CONTAINER_NAME }}
  #       image: ${{ steps.build-image.outputs.image }}

  #   - name: Deploy Amazon ECS task definition
  #     env:
  #       ECS_SERVICE: backend-banodoco-frontend-service
  #       ECS_CLUSTER: backend-banodoco-frontend-cluster
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: ${{ env.ECS_SERVICE }}
  #       cluster: ${{ env.ECS_CLUSTER }}
  #       wait-for-service-stability: true

  update-runner:
    name: Update Background Runner
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create and activate virtual environment
        run: |
          python3 -m venv venv
          source venv/bin/activate

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Restart runner
        run: |
          pkill -f "banodoco_runner"
          . venv/bin/activate && nohup python banodoco_runner.py > script_output.log 2>&1 &